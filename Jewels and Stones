/**
 * @param {string} jewels
 * @param {string} stones
 * @return {number}

 Approch 1: 

 */
// var numJewelsInStones = function(jewels, stones) {
//     let count=0;
//     for(i=0;i<stones.length;i++){
//         if(jewels.includes(stones[i])){
//             ++count;
//         }
//     }
//     return count;
    
// };

//Approch 2: O(n*m), s.c =>0(1)

// var numJewelsInStones = function(jewels, stones) {
//     let count=0;
//     for(i=0;i<stones.length;i++){
//         for(j=0;j<jewels.length;j++){
//             if(stones[i]==jewels[j]){
//                 ++count;
//                 break;
//             }
//         }
//     }
//     return count;
    
// };

//Approch 3: O(n) s.c=>O(1)



var numJewelsInStones = function(jewels, stones) {


    let setJ=new Set();

    for(let i=0;i<jewels.length;i++){
        setJ.add(jewels[i])
    }
    let count=0;
    for(let i=0;i<stones.length;i++){
        if(setJ.has(stones[i])){
            ++count;
        }

    }
    return count;
    
};
