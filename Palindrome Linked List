Palindrome Linked List:

Brute froce: time complexity o(n) and space complexity O(n) because we are using extra space.
/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {boolean}
 */
var isPalindrome = function(head) {
    let arr=[];
    let curr=head;
    if(head==null) return false;
    while(curr){
        arr.push(curr.val);
        curr=curr.next;
    }
    for(let i=0;i<arr.length/2;i++){
        if(arr[i]!=arr[arr.length-1-i]){
            return false;
        }

    }
    return true;

    
};

Optimized Approch: with time complexity O(n) and space complexity= O(1)

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {boolean}
 */
var isPalindrome = function(head) {
// optimized approch:
// 1. find the middle element of the list
let slow=fast=head;
while(fast && fast.next){
    slow=slow.next;
    fast=fast.next.next;
}
let curr=slow;
let prev=null;
// 2. reverse the second half of the list
while(curr){
    let temp=curr.next;
    curr.next=prev;
    prev=curr;
    curr=temp;
}

// 3. check f palindroome or not
let firstList=head;
let secondList=prev;
while(secondList)
{
    if(firstList.val!=secondList.val){
        return false;
    }
    firstList=firstList.next;
    secondList=secondList.next;
}
return true;
    
};
